{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8fe1e9621f114e805e843232a52c137a469651182929bf361695fb8156933f5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4566503",
    "logsBloom": "0x
    "blockHash": "0xffb149a1986f903b7788f121de5fd61f01a2dc97dc535a7a1351059d120e8281",
    "transactionHash": "0xb8fe1e9621f114e805e843232a52c137a469651182929bf361695fb8156933f5",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "4566503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "solcInputHash": "8641bc912625474bbf8ba32e216caa90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Gupta.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident exchange Constant Product Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/ConstantProductPoolFactory.sol\":\"ConstantProductPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/deployer/MasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/TridentOwnable.sol\\\";\\n\\n/// @notice Trident pool deployer contract with template factory whitelist.\\n/// @author Mudit Gupta.\\ncontract MasterDeployer is TridentOwnable {\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelist(address indexed factory);\\n    event RemoveFromWhitelist(address indexed factory);\\n    event BarFeeUpdated(uint256 indexed barFee);\\n\\n    uint256 public barFee;\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n\\n    mapping(address => bool) public pools;\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    constructor(\\n        uint256 _barFee,\\n        address _barFeeTo,\\n        address _bento\\n    ) {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        require(_barFeeTo != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_bento != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        barFee = _barFee;\\n        barFeeTo = _barFeeTo;\\n        bento = _bento;\\n    }\\n\\n    function deployPool2(address _factory, bytes calldata _deployData) external returns (address pool) {\\n        require(whitelistedFactories[_factory], \\\"FACTORY_NOT_WHITELISTED\\\");\\n        pool = IPoolFactory(_factory).deployPool(_deployData);\\n        pools[pool] = true;\\n        emit DeployPool(_factory, pool, _deployData);\\n    }\\n\\n    function addToWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = true;\\n        emit AddToWhitelist(_factory);\\n    }\\n\\n    function removeFromWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = false;\\n        emit RemoveFromWhitelist(_factory);\\n    }\\n\\n    function setBarFee(uint256 _barFee) external onlyOwner {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        barFee = _barFee;\\n        emit BarFeeUpdated(_barFee);\\n    }\\n}\\n\",\"keccak256\":\"0x944d440c3a143ff77c12f7bc6151c074548abb907bfef18cafaeb7fab3a36925\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\nimport \\\"../libraries/RebaseLibrary.sol\\\";\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Reads the Rebase `totals`from storage for a given token\\n    function totals(address token) external view returns (Rebase memory total);\\n}\\n\",\"keccak256\":\"0xe268448becc3d398726136d11325168c1c2973f1b5b8ba1a395f04d642b548fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer interface.\\ninterface IMasterDeployer {\\n    function barFee() external view returns (uint256);\\n\\n    function barFeeTo() external view returns (address);\\n\\n    function bento() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function pools(address pool) external view returns (bool);\\n\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n}\\n\",\"keccak256\":\"0x91c23deb7e4372faa35a0ae4ef6ccd684049aea7b2c75cf63009b28591b91cbc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n\\n    function configAddress(bytes32 data) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x03b9677a7914f97ca3ae57deb690cb80d0f1ef4d3541573b4dee6d3cebd5df2e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool callback interface.\\ninterface ITridentCallee {\\n    function tridentSwapCallback(bytes calldata data) external;\\n\\n    function tridentMintCallback(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x256e838362a3064201b37b3b7c08bc1421b173a6fea633176123f0b827b868c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RebaseLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library\\nlibrary RebaseLibrary {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = (elastic * total.base) / total.elastic;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = (base * total.elastic) / total.base;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa83360497e7e2a04332211832a8ceb41ef0301892fcf1b17174d7d4466782d44\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TridentMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident sqrt helper library.\\nlibrary TridentMath {\\n    /// @notice Calculate sqrt (x) rounding down, where `x` is unsigned 256-bit integer number.\\n    /// @dev Adapted from https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol, \\n    /// \\u00a9 2019 ABDK Consulting, License-Identifier: BSD-4-Clause.\\n    /// @param x Unsigned 256-bit integer number.\\n    /// @return result Sqrt result.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x == 0) result = 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x8) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // @dev Seven iterations should be enough.\\n                uint256 r1 = x / r;\\n                result = r < r1 ? r : r1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccbada517ace78149a4602ce782e6faf408404ee300569b8adf76e0eb7f0dd3b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ConstantProductPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"../libraries/TridentMath.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\nimport \\\"../deployer/MasterDeployer.sol\\\";\\nimport \\\"../../spec/harness/Simplifications.sol\\\";\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\n\\n/// @notice Trident exchange pool template with constant product formula for swapping between an ERC-20 token pair.\\n/// @dev The reserves are stored as bento shares.\\n///      The curve is applied to shares as well. This pool does not care about the underlying amounts.\\ncontract ConstantProductPool is IPool, TridentERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient, uint256 liquidity);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient, uint256 liquidity);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    uint256 internal constant MINIMUM_LIQUIDITY = 1000;\\n\\n    uint8 internal constant PRECISION = 112;\\n    uint256 public constant MAX_FEE = 10000; // @dev 100%.\\n    uint256 internal constant MAX_FEE_SQUARE = 100000000;\\n    uint256 public immutable swapFee;\\n    uint256 public immutable MAX_FEE_MINUS_SWAP_FEE;\\n\\n    address public immutable barFeeTo;\\n    Simplifications public simplified;\\n    IBentoBoxMinimal public immutable bento;\\n    IMasterDeployer public immutable masterDeployer;\\n    address public token0;\\n    address public token1;\\n\\n    uint256 public barFee;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast;\\n\\n    uint112 public reserve0;\\n    uint112 public reserve1;\\n    uint32 internal blockTimestampLast;\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:ConstantProduct\\\";\\n\\n    uint256 public unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address _token0, address _token1, uint256 _swapFee, bool _twapSupport) = abi.decode(\\n            _deployData,\\n            (address, address, uint256, bool)\\n        );\\n\\n        // @dev Factory ensures that the tokens are sorted.\\n        require(_token0 != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_token1 != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_token0 != _token1, \\\"IDENTICAL_ADDRESSES\\\");\\n        require(_token0 != address(this), \\\"INVALID_TOKEN\\\");\\n        require(_token1 != address(this), \\\"INVALID_TOKEN\\\");\\n        require(_swapFee <= MAX_FEE, \\\"INVALID_SWAP_FEE\\\");\\n\\n        token0 = _token0;\\n        token1 = _token1;\\n        swapFee = _swapFee;\\n        // @dev This is safe from underflow - `swapFee` cannot exceed `MAX_FEE` per previous check.\\n        unchecked {\\n            MAX_FEE_MINUS_SWAP_FEE = MAX_FEE - _swapFee;\\n        }\\n        barFee = IMasterDeployer(_masterDeployer).barFee();\\n        barFeeTo = IMasterDeployer(_masterDeployer).barFeeTo();\\n        bento = IBentoBoxMinimal(IMasterDeployer(_masterDeployer).bento());\\n        masterDeployer = IMasterDeployer(_masterDeployer);\\n        unlocked = 1;\\n        if (_twapSupport) blockTimestampLast = 1;\\n    }\\n\\n    /// @dev Mints LP tokens - should be called via the router after transferring `bento` tokens.\\n    /// The router must ensure that sufficient LP tokens are minted by using the return value.\\n    function mint(bytes memory data) public virtual override lock returns (uint256 liquidity) {\\n        address recipient = abi.decode(data, (address));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n\\n        uint256 computed = simplified.sqrt(balance0 * balance1);\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        (uint256 fee0, uint256 fee1) = _nonOptimalMintFee(amount0, amount1, _reserve0, _reserve1);\\n        _reserve0 += uint112(fee0);\\n        _reserve1 += uint112(fee1);\\n\\n        (uint256 _totalSupply, uint256 k) = _mintFee(_reserve0, _reserve1);\\n\\n        if (_totalSupply == 0) {\\n            require(amount0 > 0 && amount1 > 0, \\\"INVALID_AMOUNTS\\\");\\n            liquidity = computed - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        } else {\\n            uint256 kIncrease;\\n            unchecked {\\n                kIncrease = computed - k;\\n            }\\n            liquidity = (kIncrease * _totalSupply) / k;\\n        }\\n        require(liquidity != 0, \\\"INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(recipient, liquidity);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = computed;\\n        uint256 liquidityForEvent = liquidity;\\n        emit Mint(msg.sender, amount0, amount1, recipient, liquidityForEvent);\\n    }\\n\\n    /// @dev Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.\\n    function burn(bytes memory data) public virtual override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address recipient, bool unwrapBento) = abi.decode(data, (address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        (uint256 _totalSupply, ) = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n        _transfer(token0, amount0, recipient, unwrapBento);\\n        _transfer(token1, amount1, recipient, unwrapBento);\\n        // @dev This is safe from underflow - amounts are lesser figures derived from balances.\\n        unchecked {\\n            balance0 -= amount0;\\n            balance1 -= amount1;\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = simplified.sqrt(balance0 * balance1);\\n\\n        withdrawnAmounts = new TokenAmount[](2);\\n        withdrawnAmounts[0] = TokenAmount({token: address(token0), amount: amount0});\\n        withdrawnAmounts[1] = TokenAmount({token: address(token1), amount: amount1});\\n        emit Burn(msg.sender, amount0, amount1, recipient, liquidity);\\n    }\\n\\n    /// @dev Burns LP tokens sent to this contract and swaps one of the output tokens for another\\n    /// - i.e., the user gets a single token out by burning LP tokens.\\n    function burnSingle(bytes memory data) public virtual override lock returns (uint256 amountOut) {\\n        (address tokenOut, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        (uint256 _totalSupply, ) = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 amount0 = (liquidity * _reserve0) / _totalSupply;\\n        uint256 amount1 = (liquidity * _reserve1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n\\n        // Swap one token for another\\n        unchecked {\\n            if (tokenOut == token1) {\\n                // @dev Swap `token0` for `token1`\\n                // - calculate `amountOut` as if the user first withdrew balanced liquidity and then swapped `token0` for `token1`.\\n                amount1 += _getAmountOut(amount0, _reserve0 - amount0, _reserve1 - amount1);\\n                _transfer(token1, amount1, recipient, unwrapBento);\\n                amountOut = amount1;\\n                amount0 = 0;\\n            } else {\\n                // @dev Swap `token1` for `token0`.\\n                require(tokenOut == token0, \\\"INVALID_OUTPUT_TOKEN\\\");\\n                amount0 += _getAmountOut(amount1, _reserve1 - amount1, _reserve0 - amount0);\\n                _transfer(token0, amount0, recipient, unwrapBento);\\n                amountOut = amount0;\\n                amount1 = 0;\\n            }\\n        }\\n\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = simplified.sqrt(balance0 * balance1);\\n        emit Burn(msg.sender, amount0, amount1, recipient, liquidity);\\n    }\\n\\n    /// @dev Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    function swap(bytes memory data) public virtual override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        require(_reserve0 > 0, \\\"POOL_UNINITIALIZED\\\");\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amountIn;\\n        address tokenOut;\\n        unchecked {\\n            if (tokenIn == token0) {\\n                tokenOut = token1;\\n                amountIn = balance0 - _reserve0;\\n                amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n                balance1 -= amountOut;\\n            } else {\\n                require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n                tokenOut = token0;\\n                amountIn = balance1 - reserve1;\\n                amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n                balance0 -= amountOut;\\n            }\\n        }\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n\\n    /// @dev Swaps one token for another. The router must support swap callbacks and ensure there isn't too much slippage.\\n    function flashSwap(bytes memory data) public virtual override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento, uint256 amountIn, bytes memory context) = abi.decode(\\n            data,\\n            (address, address, bool, uint256, bytes)\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        require(_reserve0 > 0, \\\"POOL_UNINITIALIZED\\\");\\n        unchecked {\\n            if (tokenIn == token0) {\\n                amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n                _transfer(token1, amountOut, recipient, unwrapBento);\\n                ITridentCallee(msg.sender).tridentSwapCallback(context);\\n                (uint256 balance0, uint256 balance1) = _balance();\\n                require(balance0 - _reserve0 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n                _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n                emit Swap(recipient, tokenIn, token1, amountIn, amountOut);\\n            } else {\\n                require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n                amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n                _transfer(token0, amountOut, recipient, unwrapBento);\\n                ITridentCallee(msg.sender).tridentSwapCallback(context);\\n                (uint256 balance0, uint256 balance1) = _balance();\\n                require(balance1 - _reserve1 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n                _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n                emit Swap(recipient, tokenIn, token0, amountIn, amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev Updates `barFee` for Trident protocol.\\n    function updateBarFee() public {\\n        barFee = IMasterDeployer(masterDeployer).barFee();\\n    }\\n\\n    function _getReserves()\\n        internal\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _balance() public view returns (uint256 balance0, uint256 balance1) {\\n        balance0 = bento.balanceOf(token0, address(this));\\n        balance1 = bento.balanceOf(token1, address(this));\\n    }\\n\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _blockTimestampLast\\n    ) internal {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"OVERFLOW\\\");\\n        if (_blockTimestampLast == 0) {\\n            // @dev TWAP support is disabled for gas efficiency.\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n        } else {\\n            uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n            if (blockTimestamp != _blockTimestampLast && _reserve0 != 0 && _reserve1 != 0) {\\n                unchecked {\\n                    uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\\n                    uint256 price0 = (uint256(_reserve1) << PRECISION) / _reserve0;\\n                    price0CumulativeLast += price0 * timeElapsed;\\n                    uint256 price1 = (uint256(_reserve0) << PRECISION) / _reserve1;\\n                    price1CumulativeLast += price1 * timeElapsed;\\n                }\\n            }\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n            blockTimestampLast = blockTimestamp;\\n        }\\n        emit Sync(balance0, balance1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) internal returns (uint256 _totalSupply, uint256 computed) {\\n        _totalSupply = totalSupply;\\n        uint256 _kLast = kLast;\\n        if (_kLast != 0) {\\n            computed = simplified.sqrt(uint256(_reserve0) * _reserve1);\\n            if (computed > _kLast) {\\n                // @dev `barFee` % of increase in liquidity.\\n                // It's going to be slightly less than `barFee` % in reality due to the math.\\n                uint256 liquidity = (_totalSupply * (computed - _kLast) * barFee) / computed / MAX_FEE;\\n                if (liquidity != 0) {\\n                    _mint(barFeeTo, liquidity);\\n                    _totalSupply += liquidity;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveAmountIn,\\n        uint256 reserveAmountOut\\n    ) public virtual view returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * MAX_FEE_MINUS_SWAP_FEE;\\n        amountOut = (amountInWithFee * reserveAmountOut) / (reserveAmountIn * MAX_FEE + amountInWithFee);\\n    }\\n\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveAmountIn,\\n        uint256 reserveAmountOut\\n    ) internal view returns (uint256 amountIn) {\\n        amountIn = (reserveAmountIn * amountOut * MAX_FEE) / ((reserveAmountOut - amountOut) * MAX_FEE_MINUS_SWAP_FEE) + 1;\\n    }\\n\\n    function _transfer(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bento.withdraw(token, address(this), to, 0, shares);\\n        } else {\\n            bento.transfer(token, address(this), to, shares);\\n        }\\n    }\\n\\n    /// @dev This fee is charged to cover for `swapFee` when users add unbalanced liquidity.\\n    function _nonOptimalMintFee(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) internal view returns (uint256 token0Fee, uint256 token1Fee) {\\n        if (_reserve0 == 0 || _reserve1 == 0) return (0, 0);\\n        uint256 amount1Optimal = (_amount0 * _reserve1) / _reserve0;\\n        if (amount1Optimal <= _amount1) {\\n            token1Fee = (swapFee * (_amount1 - amount1Optimal)) / (2 * MAX_FEE);\\n        } else {\\n            uint256 amount0Optimal = (_amount1 * _reserve0) / _reserve1;\\n            token0Fee = (swapFee * (_amount0 - amount0Optimal)) / (2 * MAX_FEE);\\n        }\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = token0;\\n        assets[1] = token1;\\n    }\\n\\n    function getAmountOut(bytes memory data) public virtual view override returns (uint256 finalAmountOut) {\\n        (address tokenIn, uint256 amountIn) = abi.decode(data, (address, uint256));\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves();\\n        if (tokenIn == token0) {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n        } else {\\n            require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n            finalAmountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n        }\\n    }\\n\\n    function getAmountIn(bytes calldata data) public view override returns (uint256 finalAmountIn) {\\n        (address tokenOut, uint256 amountOut) = abi.decode(data, (address, uint256));\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves();\\n        if (tokenOut == token1) {\\n            finalAmountIn = _getAmountIn(amountOut, _reserve0, _reserve1);\\n        } else {\\n            require(tokenOut == token0, \\\"INVALID_OUTPUT_TOKEN\\\");\\n            finalAmountIn = _getAmountIn(amountOut, _reserve1, _reserve0);\\n        }\\n    }\\n\\n    /// @dev returned values are in terms of BentoBox \\\"shares\\\".\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        return _getReserves();\\n    }\\n\\n    /// @dev returned values are the native ERC20 token amounts.\\n    function getNativeReserves()\\n        public\\n        view\\n        returns (\\n            uint256 _nativeReserve0,\\n            uint256 _nativeReserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, uint32 __blockTimestampLast) = _getReserves();\\n        _nativeReserve0 = bento.toAmount(token0, _reserve0, false);\\n        _nativeReserve1 = bento.toAmount(token1, _reserve1, false);\\n        _blockTimestampLast = __blockTimestampLast;\\n    }\\n}\\n\",\"keccak256\":\"0xbe04a3ecd6f385bf067f41bc0eda8cc4e39975a02e1893e19de1b80c4a29246e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ConstantProductPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ConstantProductPool.sol\\\";\\nimport \\\"./PoolDeployer.sol\\\";\\n\\n/// @notice Contract for deploying Trident exchange Constant Product Pool with configurations.\\n/// @author Mudit Gupta.\\ncontract ConstantProductPoolFactory is PoolDeployer {\\n    constructor(address _masterDeployer) PoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address tokenA, address tokenB, uint256 swapFee, bool twapSupport) = abi.decode(_deployData, (address, address, uint256, bool));\\n\\n        if (tokenA > tokenB) {\\n            (tokenA, tokenB) = (tokenB, tokenA);\\n        }\\n\\n        // @dev Strips any extra data.\\n        _deployData = abi.encode(tokenA, tokenB, swapFee, twapSupport);\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = tokenA;\\n        tokens[1] = tokenB;\\n\\n        // @dev Salt is not actually needed since `_deployData` is part of creationCode and already contains the salt.\\n        bytes32 salt = keccak256(_deployData);\\n        pool = address(new ConstantProductPool{salt: salt}(_deployData, masterDeployer));\\n        _registerPool(pool, tokens, salt);\\n    }\\n}\\n\",\"keccak256\":\"0x3deab7704b9619a914ae8b6c4b933392e1049a761457a06f61af3e2bbe3f97d1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/PoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer for whitelisted template factories.\\n/// @author Mudit Gupta.\\nabstract contract PoolDeployer {\\n    address public immutable masterDeployer;\\n\\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes32 => address) public configAddress;\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == masterDeployer, \\\"UNAUTHORIZED_DEPLOYER\\\");\\n        _;\\n    }\\n\\n    constructor(address _masterDeployer) {\\n        require(_masterDeployer != address(0), \\\"ZERO_ADDRESS\\\");\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _registerPool(\\n        address pool,\\n        address[] memory tokens,\\n        bytes32 salt\\n    ) internal onlyMaster {\\n        // @dev Store the address of the deployed contract.\\n        configAddress[salt] = pool;\\n        // @dev Attacker used underflow, it was not very effective. poolimon!\\n        // null token array would cause deployment to fail via out of bounds memory axis/gas limit.\\n        unchecked {\\n            for (uint256 i; i < tokens.length - 1; i++) {\\n                require(tokens[i] < tokens[i + 1], \\\"INVALID_TOKEN_ORDER\\\");\\n                for (uint256 j = i + 1; j < tokens.length; j++) {\\n                    pools[tokens[i]][tokens[j]].push(pool);\\n                    pools[tokens[j]][tokens[i]].push(pool);\\n                }\\n            }\\n        }\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](endIndex - startIndex);\\n        for (uint256 i = 0; startIndex < endIndex; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex];\\n            startIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6098ddd6290f3403f3dba736632d3841244663bec6ec5bb5e318b27fdb6e88f1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/TridentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n//notice Trident pool ERC-20 with EIP-2612 extension.\\n/// @author Adapted from RariCapital, https://github.com/Rari-Capital/solmate/blob/main/src/erc20/ERC20.sol,\\n/// License-Identifier: AGPL-3.0-only.\\nabstract contract TridentERC20 {\\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    string public constant name = \\\"Sushi LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    //notice owner -> balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    //notice owner -> spender -> allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    //notice Chain Id at this contract's deployment.\\n    uint256 internal immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n    //notice EIP-712 typehash for this contract's domain at deployment.\\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\\n    //notice EIP-712 typehash for this contract's {permit} struct.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    //notice owner -> nonce mapping used in {permit}.\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        DOMAIN_SEPARATOR_CHAIN_ID = block.chainid;\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator();\\n    }\\n\\n    function _calculateDomainSeparator() internal view returns (bytes32 domainSeperator) {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    //notice EIP-712 typehash for this contract's domain.\\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeperator) {\\n        domainSeperator = block.chainid == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator();\\n    }\\n\\n    //notice Approves `amount` from `msg.sender` to be spent by `spender`.\\n    /// @param spender Address of the party that can pull tokens from `msg.sender`'s account.\\n    /// @param amount The maximum collective `amount` that `spender` can pull.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    //notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    //notice Transfers `amount` tokens from `sender` to `recipient`. Caller needs approval from `from`.\\n    /// @param sender Address to pull tokens `from`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[sender][msg.sender] != type(uint256).max) {\\n            allowance[sender][msg.sender] -= amount;\\n        }\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    //notice Triggers an approval from `owner` to `spender`.\\n    /// @param owner The address to approve from.\\n    /// @param spender The address to be approved.\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite).\\n    /// @param deadline The time at which to expire the signature.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n        allowance[recoveredAddress][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address recipient, uint256 amount) internal {\\n        totalSupply += amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burn(address sender, uint256 amount) internal {\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from underflow - users won't ever\\n        // have a balance larger than `totalSupply`.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n        emit Transfer(sender, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5d1580e279b272ff58a8e880a10ef3262b76291a95fac5b61f143c28f43479ec\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TridentOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident access control contract.\\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\\ncontract TridentOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event TransferOwner(address indexed sender, address indexed recipient);\\n    event TransferOwnerClaim(address indexed sender, address indexed recipient);\\n\\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\\n    constructor() {\\n        owner = msg.sender;\\n        emit TransferOwner(address(0), msg.sender);\\n    }\\n\\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    /// @notice `pendingOwner` can claim `owner` account.\\n    function claimOwner() external {\\n        require(msg.sender == pendingOwner, \\\"NOT_PENDING_OWNER\\\");\\n        emit TransferOwner(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Transfer `owner` account.\\n    /// @param recipient Account granted `owner` access control.\\n    /// @param direct If 'true', ownership is directly transferred.\\n    function transferOwner(address recipient, bool direct) external onlyOwner {\\n        require(recipient != address(0), \\\"ZERO_ADDRESS\\\");\\n        if (direct) {\\n            owner = recipient;\\n            emit TransferOwner(msg.sender, recipient);\\n        } else {\\n            pendingOwner = recipient;\\n            emit TransferOwnerClaim(msg.sender, recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bb04352352b77289553cf278a61c75206e2b14477f0e1d61e7ce648c2306b46\",\"license\":\"GPL-3.0-or-later\"},\"spec/harness/Simplifications.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ncontract Simplifications {\\n\\t// for simplifications\\n\\tmapping(uint256 => uint256) public sqrtHarness;\\n\\n    function sqrt(uint256 x) public view returns (uint256) {\\n        // if one of the balances is zero then only the sqrt can be zero\\n        if (x == 0) {\\n            return 0;\\n        }\\n        \\n        // TODO: check\\n        require(sqrtHarness[x] != 0 && sqrtHarness[x] <= x,\\n                \\\"sqrt constraint not met\\\");\\n\\n        // require(sqrtHarness[x] * sqrtHarness[x] == x);\\n\\n        return sqrtHarness[x];\\n    }\\n\\n    // function sqrt(uint256 x) public view returns (uint256) {\\n    //     // if one of the balances is zero then only the sqrt can be zero\\n    //     if (x == 0) {\\n    //         return 0;\\n    //     }\\n\\n    //     return 1+(x/4);\\n    // }\\n}\",\"keccak256\":\"0xd8712c67cfb1ad3aa7fff5616d7a294c450f1519c93ff0c8fbc8c658b3c4d612\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161531c38038061531c83398101604081905261002f9161008f565b806001600160a01b0381166100795760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640160405180910390fd5b60601b6001600160601b031916608052506100bf565b6000602082840312156100a157600080fd5b81516001600160a01b03811681146100b857600080fd5b9392505050565b60805160601c6152316100eb6000396000818161015a0152818161038d015261055301526152316000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806371a25812116200005657806371a25812146200012e578063cf58879a1462000154578063f6ab6d99146200017c57600080fd5b8063169c4cef146200008057806327c3cae114620000c15780635bc93d6c14620000d8575b600080fd5b6200009762000091366004620009af565b620001b5565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b62000097620000d236600462000a5a565b62000208565b6200011f620000e936600462000971565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000b8565b620001456200013f366004620009f5565b62000401565b604051620000b8919062000b33565b620000977f000000000000000000000000000000000000000000000000000000000000000081565b620000976200018d36600462000a40565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528260005260406000206020528160005260406000208181548110620001de57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60008060008060008580602001905181019062000226919062000911565b93509350935093508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16111562000267579192915b6040805173ffffffffffffffffffffffffffffffffffffffff808716602083015285169181019190915260608101839052811515608082015260a001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152600280845260608401909252975060009190816020016020820280368337019050509050848160008151811062000309576200030962000ca8565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083816001815181106200035a576200035a62000ca8565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101820152875190880120604051819089907f000000000000000000000000000000000000000000000000000000000000000090620003b89062000903565b620003c592919062000b8f565b8190604051809103906000f5905080158015620003e6573d6000803e3d6000fd5b509650620003f68783836200053b565b505050505050919050565b60606200040f838362000c23565b67ffffffffffffffff8111156200042a576200042a62000cd7565b60405190808252806020026020018201604052801562000454578160200160208202803683370190505b50905060005b82841015620005325773ffffffffffffffffffffffffffffffffffffffff808716600090815260208181526040808320938916835292905220805485908110620004a857620004a862000ca8565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110620004e857620004e862000ca8565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620005198162000c3d565b9450508080620005299062000c3d565b9150506200045a565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614620005e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f4445504c4f594552000000000000000000000060448201526064015b60405180910390fd5b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b6001835103811015620008fd5782816001018151811062000652576200065262000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683828151811062000685576200068562000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106200070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f544f4b454e5f4f52444552000000000000000000000000006044820152606401620005d7565b600181015b8351811015620008f35760008085848151811062000733576200073362000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008583815181106200078c576200078c62000ca8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001692881692909217909155845181908690849081106200081b576200081b62000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811062000874576200087462000ca8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091550162000711565b506001016200062d565b50505050565b6144cf8062000d2d83390190565b600080600080608085870312156200092857600080fd5b8451620009358162000d06565b6020860151909450620009488162000d06565b60408601516060870151919450925080151581146200096657600080fd5b939692955090935050565b600080604083850312156200098557600080fd5b8235620009928162000d06565b91506020830135620009a48162000d06565b809150509250929050565b600080600060608486031215620009c557600080fd5b8335620009d28162000d06565b92506020840135620009e48162000d06565b929592945050506040919091013590565b6000806000806080858703121562000a0c57600080fd5b843562000a198162000d06565b9350602085013562000a2b8162000d06565b93969395505050506040820135916060013590565b60006020828403121562000a5357600080fd5b5035919050565b60006020828403121562000a6d57600080fd5b813567ffffffffffffffff8082111562000a8657600080fd5b818401915084601f83011262000a9b57600080fd5b81358181111562000ab05762000ab062000cd7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000af95762000af962000cd7565b8160405282815287602084870101111562000b1357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b8357835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000b4f565b50909695505050505050565b604081526000835180604084015260005b8181101562000bbf576020818701810151606086840101520162000ba0565b8181111562000bd2576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60008282101562000c385762000c3862000c79565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000c725762000c7262000c79565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000d2957600080fd5b5056fe6101606040523480156200001257600080fd5b50604051620044cf380380620044cf8339810160408190526200003591620005b5565b4660805262000112604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b60a081815250506000806000808580602001905181019062000135919062000555565b929650909450925090506001600160a01b0384166200018a5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b6001600160a01b038316620001d15760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000181565b826001600160a01b0316846001600160a01b03161415620002355760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015260640162000181565b6001600160a01b038416301415620002805760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015260640162000181565b6001600160a01b038316301415620002cb5760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015260640162000181565b612710821115620003125760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b604482015260640162000181565b600580546001600160a01b038087166001600160a01b03199283161790925560068054868416921691909117905560c083905261271083900360e052604080516360a56c0160e11b815290519187169163c14ad80291600480820192602092909190829003018186803b1580156200038957600080fd5b505afa1580156200039e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c49190620006a6565b600781905550846001600160a01b0316630c0a0cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040457600080fd5b505afa15801562000419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043f91906200052e565b6001600160a01b0316610100816001600160a01b031660601b81525050846001600160a01b0316634da318276040518163ffffffff1660e01b815260040160206040518083038186803b1580156200049657600080fd5b505afa158015620004ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004d191906200052e565b6001600160601b0319606091821b8116610120529086901b16610140526001600c5580156200051057600b80546001600160e01b0316600160e01b1790555b505050505050620006ef565b80516200052981620006d6565b919050565b6000602082840312156200054157600080fd5b81516200054e81620006d6565b9392505050565b600080600080608085870312156200056c57600080fd5b84516200057981620006d6565b60208601519094506200058c81620006d6565b6040860151606087015191945092508015158114620005aa57600080fd5b939692955090935050565b60008060408385031215620005c957600080fd5b82516001600160401b0380821115620005e157600080fd5b818501915085601f830112620005f657600080fd5b8151818111156200060b576200060b620006c0565b604051601f8201601f19908116603f01168101908382118183101715620006365762000636620006c0565b816040528281526020935088848487010111156200065357600080fd5b600091505b8282101562000677578482018401518183018501529083019062000658565b82821115620006895760008484830101525b95506200069b9150508582016200051c565b925050509250929050565b600060208284031215620006b957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620006ec57600080fd5b50565b60805160a05160c05160e0516101005160601c6101205160601c6101405160601c613d28620007a76000396000818161076e01526122a40152600081816104fd0152818161169a0152818161176701528181611c2701528181611d0901528181612d150152612df10152600081816103c0015261325501526000818161066f01528181611e5e0152613328015260008181610524015281816133ea01526134550152600061149e015260006113750152613d286000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c806365dfc7671161019157806395d89b41116100e3578063bc063e1a11610097578063d21220a711610071578063d21220a714610790578063d505accf146107b0578063dd62ed3e146107c357600080fd5b8063bc063e1a14610757578063c14ad80214610760578063cf58879a1461076957600080fd5b8063a8f1f52e116100c8578063a8f1f52e1461071e578063a9059cbb14610731578063af8c09bf1461074457600080fd5b806395d89b41146106bb578063a69840a8146106f757600080fd5b80637464fc3d116101455780637e564b021161011f5780637e564b021461066a5780637ecebe001461069157806392bc3219146106b157600080fd5b80637464fc3d1461062e57806375c61ecb146106375780637ba0e2e71461065757600080fd5b80636a5e2650116101765780636a5e2650146105f25780636df93c1d146105fb57806370a082311461060e57600080fd5b806365dfc767146105b457806367e4ac2c146105dd57600080fd5b8063313ce5671161024a57806354cf2aeb116101fe5780635a3d5493116101d85780635a3d54931461056c5780635a76f25e14610575578063627dd56a146105a157600080fd5b806354cf2aeb1461051f57806356c4e05a146105465780635909c0d51461056357600080fd5b8063443cb4bc1161022f578063443cb4bc146104ac578063499a3c50146104e55780634da31827146104f857600080fd5b8063313ce5671461048a5780633644e515146104a457600080fd5b80630dfe1681116102a157806323b872dd1161028657806323b872dd146104305780632a07b6c71461044357806330adf81f1461046357600080fd5b80630dfe16811461040757806318160ddd1461042757600080fd5b80630902f1ac116102d25780630902f1ac1461035d578063095ea7b3146103985780630c0a0cd2146103bb57600080fd5b8063053da1c8146102ee57806306fdde0314610314575b600080fd5b6103016102fc366004613851565b6107ee565b6040519081526020015b60405180910390f35b6103506040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161030b9190613a3e565b610365610d9e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161030b565b6103ab6103a6366004613694565b610e07565b604051901515815260200161030b565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030b565b6005546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b61030160005481565b6103ab61043e366004613727565b610e80565b610456610451366004613851565b610fcc565b60405161030b91906139d9565b6103017f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610492601281565b60405160ff909116815260200161030b565b610301611371565b600b546104c6906dffffffffffffffffffffffffffff1681565b6040516dffffffffffffffffffffffffffff909116815260200161030b565b6103016104f33660046137df565b6114c0565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b6103017f000000000000000000000000000000000000000000000000000000000000000081565b61054e611647565b6040805192835260208301919091520161030b565b61030160085481565b61030160095481565b600b546104c6906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1681565b6103016105af366004613851565b6117e7565b6105bc611b58565b60408051938452602084019290925263ffffffff169082015260600161030b565b6105e5611d8e565b60405161030b919061397f565b610301600c5481565b610301610609366004613909565b611e56565b61030161061c366004613517565b60016020526000908152604090205481565b610301600a5481565b6004546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b610301610665366004613851565b611eb9565b6103017f000000000000000000000000000000000000000000000000000000000000000081565b61030161069f366004613517565b60036020526000908152604090205481565b6106b96122a2565b005b6103506040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6103017f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b61030161072c366004613851565b612345565b6103ab61073f366004613694565b6124d4565b610301610752366004613851565b612559565b61030161271081565b61030160075481565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b6006546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b6106b96107be366004613768565b61295c565b6103016107d13660046136ee565b600260209081526000928352604080842090915290825290205481565b6000600c54600114610861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6002600c8190555060008060008060008680602001905181019061088591906135a0565b9450945094509450945060008060006108ed600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000836dffffffffffffffffffffffffffff161161096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f504f4f4c5f554e494e495449414c495a454400000000000000000000000000006044820152606401610858565b60055473ffffffffffffffffffffffffffffffffffffffff89811691161415610b4d576109bb85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611e56565b6006549099506109e39073ffffffffffffffffffffffffffffffffffffffff168a8989612cae565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610a1f908790600401613a3e565b600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b50505050600080610a5c611647565b9150915086856dffffffffffffffffffffffffffff1683031015610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610858565b610ae98282878787612e54565b60065460408051898152602081018e905273ffffffffffffffffffffffffffffffffffffffff928316928d811692908d16917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050610d8b565b60065473ffffffffffffffffffffffffffffffffffffffff898116911614610bd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b610bfc85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16611e56565b600554909950610c249073ffffffffffffffffffffffffffffffffffffffff168a8989612cae565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610c60908790600401613a3e565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b50505050600080610c9d611647565b9150915086846dffffffffffffffffffffffffffff1682031015610d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610858565b610d2a8282878787612e54565b60055460408051898152602081018e905273ffffffffffffffffffffffffffffffffffffffff928316928d811692908d16917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606291015b60405180910390a450505b50506001600c5550949695505050505050565b6000806000610dfc600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610e6f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610f1d5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610f17908490613b81565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610f52908490613b81565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fba9086815260200190565b60405180910390a35060019392505050565b6060600c5460011461103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c8190555060008083806020019051810190611059919061365f565b9150915060008060006110bb600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806110cc611647565b306000908152600160205260408120549294509092506110ec8787613148565b5090506000816110fc8685613b44565b6111069190613b30565b90506000826111158686613b44565b61111f9190613b30565b905061112b3085613291565b6005546111509073ffffffffffffffffffffffffffffffffffffffff16838d8d612cae565b6006546111759073ffffffffffffffffffffffffffffffffffffffff16828d8d612cae565b8186039550808503945061118c86868b8b8b612e54565b60045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6111b48789613b44565b6040518263ffffffff1660e01b81526004016111d291815260200190565b60206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906138cc565b600a556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161123b5750506040805180820190915260055473ffffffffffffffffffffffffffffffffffffffff168152602081018490528151919d50908d906000906112a4576112a4613c6f565b6020908102919091018101919091526040805180820190915260065473ffffffffffffffffffffffffffffffffffffffff1681529081018290528c518d9060019081106112f3576112f3613c6f565b60209081029190910181019190915260408051848152918201839052810185905273ffffffffffffffffffffffffffffffffffffffff8c169033907fa476cebfbe7485684f5578d84d8a64a8afe93a0a2a3047bd6f3e681e108b8f119060600160405180910390a350506001600c5550979998505050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461461149b5750604080518082018252600e81527f5375736869204c5020546f6b656e00000000000000000000000000000000000060209182015281518083018352600181527f31000000000000000000000000000000000000000000000000000000000000009082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b507f000000000000000000000000000000000000000000000000000000000000000090565b600080806114d084860186613694565b91509150600080611530600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50600654919350915073ffffffffffffffffffffffffffffffffffffffff8581169116141561158b5761158483836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613324565b945061163d565b60055473ffffffffffffffffffffffffffffffffffffffff85811691161461160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610858565b61163a83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16613324565b94505b5050505092915050565b6005546040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015230602482015260009182917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec9060440160206040518083038186803b1580156116de57600080fd5b505afa1580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171691906138cc565b6006546040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201523060248201529193507f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec9060440160206040518083038186803b1580156117a957600080fd5b505afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e191906138cc565b90509091565b6000600c54600114611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c819055506000806000848060200190518101906118769190613558565b92509250925060008060006118da600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000836dffffffffffffffffffffffffffff161161195a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f504f4f4c5f554e494e495449414c495a454400000000000000000000000000006044820152606401610858565b600080611965611647565b6005549193509150600090819073ffffffffffffffffffffffffffffffffffffffff8b8116911614156119dd5750506006546dffffffffffffffffffffffffffff8087168085039273ffffffffffffffffffffffffffffffffffffffff16916119d19184918916611e56565b9a508a83039250611ac0565b60065473ffffffffffffffffffffffffffffffffffffffff8b8116911614611a61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b5050600554600b546dffffffffffffffffffffffffffff6e010000000000000000000000000000909104811683039173ffffffffffffffffffffffffffffffffffffffff1690611ab8908390888116908a16611e56565b9a508a840393505b611acc818c8b8b612cae565b611ad98484898989612e54565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610d80929190918252602082015260400190565b600080600080600080611bba600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b6005546040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff851660248201526000604482015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000169063566231189060640160206040518083038186803b158015611c6957600080fd5b505afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca191906138cc565b6006546040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff85166024820152600060448201529197507f0000000000000000000000000000000000000000000000000000000000000000169063566231189060640160206040518083038186803b158015611d4b57600080fd5b505afa158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8391906138cc565b959690945092505050565b60408051600280825260608083018452926020830190803683375050600554825192935073ffffffffffffffffffffffffffffffffffffffff1691839150600090611ddb57611ddb613c6f565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600654825191169082906001908110611e1957611e19613c6f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b600080611e837f000000000000000000000000000000000000000000000000000000000000000086613b44565b905080611e9261271086613b44565b611e9c9190613b18565b611ea68483613b44565b611eb09190613b30565b95945050505050565b6000600c54600114611f27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c558151600090611f44908401602090810190850161353b565b90506000806000611fa4600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611fb5611647565b600454919350915060009073ffffffffffffffffffffffffffffffffffffffff1663677342ce611fe58486613b44565b6040518263ffffffff1660e01b815260040161200391815260200190565b60206040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205391906138cc565b905060006120716dffffffffffffffffffffffffffff881685613b81565b9050600061208f6dffffffffffffffffffffffffffff881685613b81565b90506000806120c084848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff1661338f565b90925090506120cf828b613ae6565b99506120db818a613ae6565b98506000806120ea8c8c613148565b91509150816000141561218d576000861180156121075750600085115b61216d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f414d4f554e545300000000000000000000000000000000006044820152606401610858565b6121796103e888613b81565b9d5061218860006103e8613492565b6121a9565b8087038161219b8483613b44565b6121a59190613b30565b9e50505b8d612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610858565b61221a8d8f613492565b61222789898e8e8e612e54565b600a87905560408051878152602081018790529081018f90528e9073ffffffffffffffffffffffffffffffffffffffff8f169033907ff9c32fbc56ff04f32a233ebc26e388564223745e28abd8d0781dd906537f563e9060600160405180910390a350506001600c55509a9c9b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c14ad8026040518163ffffffff1660e01b815260040160206040518083038186803b15801561230857600080fd5b505afa15801561231c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234091906138cc565b600755565b60008060008380602001905181019061235e91906136c0565b915091506000806123be600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50600554919350915073ffffffffffffffffffffffffffffffffffffffff858116911614156124195761241283836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16611e56565b94506124cb565b60065473ffffffffffffffffffffffffffffffffffffffff85811691161461249d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b6124c883826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611e56565b94505b50505050919050565b336000908152600160205260408120805483919083906124f5908490613b81565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e6f9086815260200190565b6000600c546001146125c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c819055506000806000848060200190518101906125e89190613558565b925092509250600080600061264c600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b30600090815260016020526040812054939650919450925061266e8585613148565b50905060008161268e6dffffffffffffffffffffffffffff881685613b44565b6126989190613b30565b90506000826126b76dffffffffffffffffffffffffffff881686613b44565b6126c19190613b30565b90506126cd3085613291565b60065473ffffffffffffffffffffffffffffffffffffffff8b8116911614156127535761271f8283896dffffffffffffffffffffffffffff160383896dffffffffffffffffffffffffffff1603611e56565b6006549101906127479073ffffffffffffffffffffffffffffffffffffffff16828b8b612cae565b809a5060009150612835565b60055473ffffffffffffffffffffffffffffffffffffffff8b81169116146127d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610858565b6128068182886dffffffffffffffffffffffffffff1603848a6dffffffffffffffffffffffffffff1603611e56565b60055492019161282e9073ffffffffffffffffffffffffffffffffffffffff16838b8b612cae565b5098508860005b600080612840611647565b9150915061285182828b8b8b612e54565b60045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6128798385613b44565b6040518263ffffffff1660e01b815260040161289791815260200190565b60206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e791906138cc565b600a55604080518581526020810185905290810187905273ffffffffffffffffffffffffffffffffffffffff8c169033907fa476cebfbe7485684f5578d84d8a64a8afe93a0a2a3047bd6f3e681e108b8f119060600160405180910390a350506001600c5550989a9950505050505050505050565b428410156129c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610858565b60006129d0611371565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92909190612a2b83613bc4565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001612acc9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612b55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612bd057508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e415455524500000000000000006044820152606401610858565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b8015612d97576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152838116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a4016040805180830381600087803b158015612d5857600080fd5b505af1158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9091906138e5565b5050612e4e565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015612e3557600080fd5b505af1158015612e49573d6000803e3d6000fd5b505050505b50505050565b6dffffffffffffffffffffffffffff8511801590612e8057506dffffffffffffffffffffffffffff8411155b612ee6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610858565b63ffffffff8116612f4857600b80546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055613108565b6000612f5964010000000042613bfd565b90508163ffffffff168163ffffffff1614158015612f8657506dffffffffffffffffffffffffffff841615155b8015612fa157506dffffffffffffffffffffffffffff831615155b156130665781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612fec57612fec613c40565b600880549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff0000000000000000000000000000168161304757613047613c40565b0490508263ffffffff1681026009600082825401925050819055505050505b600b805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b60008054600a5490919080156132895760045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6131936dffffffffffffffffffffffffffff808816908916613b44565b6040518263ffffffff1660e01b81526004016131b191815260200190565b60206040518083038186803b1580156131c957600080fd5b505afa1580156131dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320191906138cc565b9150808211156132895760006127108360075484866132209190613b81565b61322a9088613b44565b6132349190613b44565b61323e9190613b30565b6132489190613b30565b905080156132875761327a7f000000000000000000000000000000000000000000000000000000000000000082613492565b6132848185613b18565b93505b505b509250929050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906132c6908490613b81565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006133518584613b81565b61335b9190613b44565b6127106133688686613b44565b6133729190613b44565b61337c9190613b30565b613387906001613b18565b949350505050565b60008083158061339d575082155b156133ad57506000905080613489565b6000846133ba8589613b44565b6133c49190613b30565b905085811161341f576133da6127106002613b44565b6133e48288613b81565b61340e907f0000000000000000000000000000000000000000000000000000000000000000613b44565b6134189190613b30565b9150613487565b60008461342c8789613b44565b6134369190613b30565b90506134456127106002613b44565b61344f828a613b81565b613479907f0000000000000000000000000000000000000000000000000000000000000000613b44565b6134839190613b30565b9350505b505b94509492505050565b806000808282546134a39190613b18565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101613318565b8051801515811461351257600080fd5b919050565b60006020828403121561352957600080fd5b813561353481613ccd565b9392505050565b60006020828403121561354d57600080fd5b815161353481613ccd565b60008060006060848603121561356d57600080fd5b835161357881613ccd565b602085015190935061358981613ccd565b915061359760408501613502565b90509250925092565b600080600080600060a086880312156135b857600080fd5b85516135c381613ccd565b60208701519095506135d481613ccd565b93506135e260408701613502565b925060608601519150608086015167ffffffffffffffff81111561360557600080fd5b8601601f8101881361361657600080fd5b805161362961362482613aa0565b613a51565b81815289602083850101111561363e57600080fd5b61364f826020830160208601613b98565b8093505050509295509295909350565b6000806040838503121561367257600080fd5b825161367d81613ccd565b915061368b60208401613502565b90509250929050565b600080604083850312156136a757600080fd5b82356136b281613ccd565b946020939093013593505050565b600080604083850312156136d357600080fd5b82516136de81613ccd565b6020939093015192949293505050565b6000806040838503121561370157600080fd5b823561370c81613ccd565b9150602083013561371c81613ccd565b809150509250929050565b60008060006060848603121561373c57600080fd5b833561374781613ccd565b9250602084013561375781613ccd565b929592945050506040919091013590565b600080600080600080600060e0888a03121561378357600080fd5b873561378e81613ccd565b9650602088013561379e81613ccd565b95506040880135945060608801359350608088013560ff811681146137c257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080602083850312156137f257600080fd5b823567ffffffffffffffff8082111561380a57600080fd5b818501915085601f83011261381e57600080fd5b81358181111561382d57600080fd5b86602082850101111561383f57600080fd5b60209290920196919550909350505050565b60006020828403121561386357600080fd5b813567ffffffffffffffff81111561387a57600080fd5b8201601f8101841361388b57600080fd5b803561389961362482613aa0565b8181528560208385010111156138ae57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000602082840312156138de57600080fd5b5051919050565b600080604083850312156138f857600080fd5b505080516020909101519092909150565b60008060006060848603121561391e57600080fd5b505081359360208301359350604090920135919050565b6000815180845261394d816020860160208601613b98565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b818110156139cd57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161399b565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613a31578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016139f6565b5091979650505050505050565b6020815260006135346020830184613935565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613a9857613a98613c9e565b604052919050565b600067ffffffffffffffff821115613aba57613aba613c9e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006dffffffffffffffffffffffffffff808316818516808303821115613b0f57613b0f613c11565b01949350505050565b60008219821115613b2b57613b2b613c11565b500190565b600082613b3f57613b3f613c40565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b7c57613b7c613c11565b500290565b600082821015613b9357613b93613c11565b500390565b60005b83811015613bb3578181015183820152602001613b9b565b83811115612e4e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bf657613bf6613c11565b5060010190565b600082613c0c57613c0c613c40565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613cef57600080fd5b5056fea2646970667358221220b421233d6e1cc93b4893f66c14ebd8d00bc362f04ffa5e19f6544be79db7323c64736f6c63430008070033a26469706673582212206433ee73c9123c0ae7ae17200bb5cc23398f8a17ac0f742260c065ae7bf999bc64736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806371a25812116200005657806371a25812146200012e578063cf58879a1462000154578063f6ab6d99146200017c57600080fd5b8063169c4cef146200008057806327c3cae114620000c15780635bc93d6c14620000d8575b600080fd5b6200009762000091366004620009af565b620001b5565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b62000097620000d236600462000a5a565b62000208565b6200011f620000e936600462000971565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000b8565b620001456200013f366004620009f5565b62000401565b604051620000b8919062000b33565b620000977f000000000000000000000000000000000000000000000000000000000000000081565b620000976200018d36600462000a40565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528260005260406000206020528160005260406000208181548110620001de57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60008060008060008580602001905181019062000226919062000911565b93509350935093508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16111562000267579192915b6040805173ffffffffffffffffffffffffffffffffffffffff808716602083015285169181019190915260608101839052811515608082015260a001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152600280845260608401909252975060009190816020016020820280368337019050509050848160008151811062000309576200030962000ca8565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083816001815181106200035a576200035a62000ca8565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101820152875190880120604051819089907f000000000000000000000000000000000000000000000000000000000000000090620003b89062000903565b620003c592919062000b8f565b8190604051809103906000f5905080158015620003e6573d6000803e3d6000fd5b509650620003f68783836200053b565b505050505050919050565b60606200040f838362000c23565b67ffffffffffffffff8111156200042a576200042a62000cd7565b60405190808252806020026020018201604052801562000454578160200160208202803683370190505b50905060005b82841015620005325773ffffffffffffffffffffffffffffffffffffffff808716600090815260208181526040808320938916835292905220805485908110620004a857620004a862000ca8565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110620004e857620004e862000ca8565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620005198162000c3d565b9450508080620005299062000c3d565b9150506200045a565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614620005e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f4445504c4f594552000000000000000000000060448201526064015b60405180910390fd5b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b6001835103811015620008fd5782816001018151811062000652576200065262000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683828151811062000685576200068562000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106200070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f544f4b454e5f4f52444552000000000000000000000000006044820152606401620005d7565b600181015b8351811015620008f35760008085848151811062000733576200073362000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008583815181106200078c576200078c62000ca8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001692881692909217909155845181908690849081106200081b576200081b62000ca8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811062000874576200087462000ca8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091550162000711565b506001016200062d565b50505050565b6144cf8062000d2d83390190565b600080600080608085870312156200092857600080fd5b8451620009358162000d06565b6020860151909450620009488162000d06565b60408601516060870151919450925080151581146200096657600080fd5b939692955090935050565b600080604083850312156200098557600080fd5b8235620009928162000d06565b91506020830135620009a48162000d06565b809150509250929050565b600080600060608486031215620009c557600080fd5b8335620009d28162000d06565b92506020840135620009e48162000d06565b929592945050506040919091013590565b6000806000806080858703121562000a0c57600080fd5b843562000a198162000d06565b9350602085013562000a2b8162000d06565b93969395505050506040820135916060013590565b60006020828403121562000a5357600080fd5b5035919050565b60006020828403121562000a6d57600080fd5b813567ffffffffffffffff8082111562000a8657600080fd5b818401915084601f83011262000a9b57600080fd5b81358181111562000ab05762000ab062000cd7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000af95762000af962000cd7565b8160405282815287602084870101111562000b1357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b8357835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000b4f565b50909695505050505050565b604081526000835180604084015260005b8181101562000bbf576020818701810151606086840101520162000ba0565b8181111562000bd2576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60008282101562000c385762000c3862000c79565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000c725762000c7262000c79565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000d2957600080fd5b5056fe6101606040523480156200001257600080fd5b50604051620044cf380380620044cf8339810160408190526200003591620005b5565b4660805262000112604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b60a081815250506000806000808580602001905181019062000135919062000555565b929650909450925090506001600160a01b0384166200018a5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b6001600160a01b038316620001d15760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000181565b826001600160a01b0316846001600160a01b03161415620002355760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015260640162000181565b6001600160a01b038416301415620002805760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015260640162000181565b6001600160a01b038316301415620002cb5760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015260640162000181565b612710821115620003125760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b604482015260640162000181565b600580546001600160a01b038087166001600160a01b03199283161790925560068054868416921691909117905560c083905261271083900360e052604080516360a56c0160e11b815290519187169163c14ad80291600480820192602092909190829003018186803b1580156200038957600080fd5b505afa1580156200039e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c49190620006a6565b600781905550846001600160a01b0316630c0a0cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040457600080fd5b505afa15801562000419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043f91906200052e565b6001600160a01b0316610100816001600160a01b031660601b81525050846001600160a01b0316634da318276040518163ffffffff1660e01b815260040160206040518083038186803b1580156200049657600080fd5b505afa158015620004ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004d191906200052e565b6001600160601b0319606091821b8116610120529086901b16610140526001600c5580156200051057600b80546001600160e01b0316600160e01b1790555b505050505050620006ef565b80516200052981620006d6565b919050565b6000602082840312156200054157600080fd5b81516200054e81620006d6565b9392505050565b600080600080608085870312156200056c57600080fd5b84516200057981620006d6565b60208601519094506200058c81620006d6565b6040860151606087015191945092508015158114620005aa57600080fd5b939692955090935050565b60008060408385031215620005c957600080fd5b82516001600160401b0380821115620005e157600080fd5b818501915085601f830112620005f657600080fd5b8151818111156200060b576200060b620006c0565b604051601f8201601f19908116603f01168101908382118183101715620006365762000636620006c0565b816040528281526020935088848487010111156200065357600080fd5b600091505b8282101562000677578482018401518183018501529083019062000658565b82821115620006895760008484830101525b95506200069b9150508582016200051c565b925050509250929050565b600060208284031215620006b957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620006ec57600080fd5b50565b60805160a05160c05160e0516101005160601c6101205160601c6101405160601c613d28620007a76000396000818161076e01526122a40152600081816104fd0152818161169a0152818161176701528181611c2701528181611d0901528181612d150152612df10152600081816103c0015261325501526000818161066f01528181611e5e0152613328015260008181610524015281816133ea01526134550152600061149e015260006113750152613d286000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c806365dfc7671161019157806395d89b41116100e3578063bc063e1a11610097578063d21220a711610071578063d21220a714610790578063d505accf146107b0578063dd62ed3e146107c357600080fd5b8063bc063e1a14610757578063c14ad80214610760578063cf58879a1461076957600080fd5b8063a8f1f52e116100c8578063a8f1f52e1461071e578063a9059cbb14610731578063af8c09bf1461074457600080fd5b806395d89b41146106bb578063a69840a8146106f757600080fd5b80637464fc3d116101455780637e564b021161011f5780637e564b021461066a5780637ecebe001461069157806392bc3219146106b157600080fd5b80637464fc3d1461062e57806375c61ecb146106375780637ba0e2e71461065757600080fd5b80636a5e2650116101765780636a5e2650146105f25780636df93c1d146105fb57806370a082311461060e57600080fd5b806365dfc767146105b457806367e4ac2c146105dd57600080fd5b8063313ce5671161024a57806354cf2aeb116101fe5780635a3d5493116101d85780635a3d54931461056c5780635a76f25e14610575578063627dd56a146105a157600080fd5b806354cf2aeb1461051f57806356c4e05a146105465780635909c0d51461056357600080fd5b8063443cb4bc1161022f578063443cb4bc146104ac578063499a3c50146104e55780634da31827146104f857600080fd5b8063313ce5671461048a5780633644e515146104a457600080fd5b80630dfe1681116102a157806323b872dd1161028657806323b872dd146104305780632a07b6c71461044357806330adf81f1461046357600080fd5b80630dfe16811461040757806318160ddd1461042757600080fd5b80630902f1ac116102d25780630902f1ac1461035d578063095ea7b3146103985780630c0a0cd2146103bb57600080fd5b8063053da1c8146102ee57806306fdde0314610314575b600080fd5b6103016102fc366004613851565b6107ee565b6040519081526020015b60405180910390f35b6103506040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161030b9190613a3e565b610365610d9e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161030b565b6103ab6103a6366004613694565b610e07565b604051901515815260200161030b565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030b565b6005546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b61030160005481565b6103ab61043e366004613727565b610e80565b610456610451366004613851565b610fcc565b60405161030b91906139d9565b6103017f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610492601281565b60405160ff909116815260200161030b565b610301611371565b600b546104c6906dffffffffffffffffffffffffffff1681565b6040516dffffffffffffffffffffffffffff909116815260200161030b565b6103016104f33660046137df565b6114c0565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b6103017f000000000000000000000000000000000000000000000000000000000000000081565b61054e611647565b6040805192835260208301919091520161030b565b61030160085481565b61030160095481565b600b546104c6906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1681565b6103016105af366004613851565b6117e7565b6105bc611b58565b60408051938452602084019290925263ffffffff169082015260600161030b565b6105e5611d8e565b60405161030b919061397f565b610301600c5481565b610301610609366004613909565b611e56565b61030161061c366004613517565b60016020526000908152604090205481565b610301600a5481565b6004546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b610301610665366004613851565b611eb9565b6103017f000000000000000000000000000000000000000000000000000000000000000081565b61030161069f366004613517565b60036020526000908152604090205481565b6106b96122a2565b005b6103506040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6103017f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b61030161072c366004613851565b612345565b6103ab61073f366004613694565b6124d4565b610301610752366004613851565b612559565b61030161271081565b61030160075481565b6103e27f000000000000000000000000000000000000000000000000000000000000000081565b6006546103e29073ffffffffffffffffffffffffffffffffffffffff1681565b6106b96107be366004613768565b61295c565b6103016107d13660046136ee565b600260209081526000928352604080842090915290825290205481565b6000600c54600114610861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6002600c8190555060008060008060008680602001905181019061088591906135a0565b9450945094509450945060008060006108ed600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000836dffffffffffffffffffffffffffff161161096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f504f4f4c5f554e494e495449414c495a454400000000000000000000000000006044820152606401610858565b60055473ffffffffffffffffffffffffffffffffffffffff89811691161415610b4d576109bb85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611e56565b6006549099506109e39073ffffffffffffffffffffffffffffffffffffffff168a8989612cae565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610a1f908790600401613a3e565b600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b50505050600080610a5c611647565b9150915086856dffffffffffffffffffffffffffff1683031015610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610858565b610ae98282878787612e54565b60065460408051898152602081018e905273ffffffffffffffffffffffffffffffffffffffff928316928d811692908d16917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050610d8b565b60065473ffffffffffffffffffffffffffffffffffffffff898116911614610bd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b610bfc85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16611e56565b600554909950610c249073ffffffffffffffffffffffffffffffffffffffff168a8989612cae565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610c60908790600401613a3e565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b50505050600080610c9d611647565b9150915086846dffffffffffffffffffffffffffff1682031015610d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610858565b610d2a8282878787612e54565b60055460408051898152602081018e905273ffffffffffffffffffffffffffffffffffffffff928316928d811692908d16917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606291015b60405180910390a450505b50506001600c5550949695505050505050565b6000806000610dfc600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610e6f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610f1d5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610f17908490613b81565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610f52908490613b81565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fba9086815260200190565b60405180910390a35060019392505050565b6060600c5460011461103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c8190555060008083806020019051810190611059919061365f565b9150915060008060006110bb600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806110cc611647565b306000908152600160205260408120549294509092506110ec8787613148565b5090506000816110fc8685613b44565b6111069190613b30565b90506000826111158686613b44565b61111f9190613b30565b905061112b3085613291565b6005546111509073ffffffffffffffffffffffffffffffffffffffff16838d8d612cae565b6006546111759073ffffffffffffffffffffffffffffffffffffffff16828d8d612cae565b8186039550808503945061118c86868b8b8b612e54565b60045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6111b48789613b44565b6040518263ffffffff1660e01b81526004016111d291815260200190565b60206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906138cc565b600a556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161123b5750506040805180820190915260055473ffffffffffffffffffffffffffffffffffffffff168152602081018490528151919d50908d906000906112a4576112a4613c6f565b6020908102919091018101919091526040805180820190915260065473ffffffffffffffffffffffffffffffffffffffff1681529081018290528c518d9060019081106112f3576112f3613c6f565b60209081029190910181019190915260408051848152918201839052810185905273ffffffffffffffffffffffffffffffffffffffff8c169033907fa476cebfbe7485684f5578d84d8a64a8afe93a0a2a3047bd6f3e681e108b8f119060600160405180910390a350506001600c5550979998505050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461461149b5750604080518082018252600e81527f5375736869204c5020546f6b656e00000000000000000000000000000000000060209182015281518083018352600181527f31000000000000000000000000000000000000000000000000000000000000009082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b507f000000000000000000000000000000000000000000000000000000000000000090565b600080806114d084860186613694565b91509150600080611530600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50600654919350915073ffffffffffffffffffffffffffffffffffffffff8581169116141561158b5761158483836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613324565b945061163d565b60055473ffffffffffffffffffffffffffffffffffffffff85811691161461160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610858565b61163a83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16613324565b94505b5050505092915050565b6005546040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015230602482015260009182917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec9060440160206040518083038186803b1580156116de57600080fd5b505afa1580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171691906138cc565b6006546040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201523060248201529193507f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec9060440160206040518083038186803b1580156117a957600080fd5b505afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e191906138cc565b90509091565b6000600c54600114611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c819055506000806000848060200190518101906118769190613558565b92509250925060008060006118da600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000836dffffffffffffffffffffffffffff161161195a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f504f4f4c5f554e494e495449414c495a454400000000000000000000000000006044820152606401610858565b600080611965611647565b6005549193509150600090819073ffffffffffffffffffffffffffffffffffffffff8b8116911614156119dd5750506006546dffffffffffffffffffffffffffff8087168085039273ffffffffffffffffffffffffffffffffffffffff16916119d19184918916611e56565b9a508a83039250611ac0565b60065473ffffffffffffffffffffffffffffffffffffffff8b8116911614611a61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b5050600554600b546dffffffffffffffffffffffffffff6e010000000000000000000000000000909104811683039173ffffffffffffffffffffffffffffffffffffffff1690611ab8908390888116908a16611e56565b9a508a840393505b611acc818c8b8b612cae565b611ad98484898989612e54565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610d80929190918252602082015260400190565b600080600080600080611bba600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b6005546040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff851660248201526000604482015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000169063566231189060640160206040518083038186803b158015611c6957600080fd5b505afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca191906138cc565b6006546040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff85166024820152600060448201529197507f0000000000000000000000000000000000000000000000000000000000000000169063566231189060640160206040518083038186803b158015611d4b57600080fd5b505afa158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8391906138cc565b959690945092505050565b60408051600280825260608083018452926020830190803683375050600554825192935073ffffffffffffffffffffffffffffffffffffffff1691839150600090611ddb57611ddb613c6f565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600654825191169082906001908110611e1957611e19613c6f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b600080611e837f000000000000000000000000000000000000000000000000000000000000000086613b44565b905080611e9261271086613b44565b611e9c9190613b18565b611ea68483613b44565b611eb09190613b30565b95945050505050565b6000600c54600114611f27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c558151600090611f44908401602090810190850161353b565b90506000806000611fa4600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611fb5611647565b600454919350915060009073ffffffffffffffffffffffffffffffffffffffff1663677342ce611fe58486613b44565b6040518263ffffffff1660e01b815260040161200391815260200190565b60206040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205391906138cc565b905060006120716dffffffffffffffffffffffffffff881685613b81565b9050600061208f6dffffffffffffffffffffffffffff881685613b81565b90506000806120c084848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff1661338f565b90925090506120cf828b613ae6565b99506120db818a613ae6565b98506000806120ea8c8c613148565b91509150816000141561218d576000861180156121075750600085115b61216d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f494e56414c49445f414d4f554e545300000000000000000000000000000000006044820152606401610858565b6121796103e888613b81565b9d5061218860006103e8613492565b6121a9565b8087038161219b8483613b44565b6121a59190613b30565b9e50505b8d612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610858565b61221a8d8f613492565b61222789898e8e8e612e54565b600a87905560408051878152602081018790529081018f90528e9073ffffffffffffffffffffffffffffffffffffffff8f169033907ff9c32fbc56ff04f32a233ebc26e388564223745e28abd8d0781dd906537f563e9060600160405180910390a350506001600c55509a9c9b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c14ad8026040518163ffffffff1660e01b815260040160206040518083038186803b15801561230857600080fd5b505afa15801561231c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234091906138cc565b600755565b60008060008380602001905181019061235e91906136c0565b915091506000806123be600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50600554919350915073ffffffffffffffffffffffffffffffffffffffff858116911614156124195761241283836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16611e56565b94506124cb565b60065473ffffffffffffffffffffffffffffffffffffffff85811691161461249d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610858565b6124c883826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611e56565b94505b50505050919050565b336000908152600160205260408120805483919083906124f5908490613b81565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e6f9086815260200190565b6000600c546001146125c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610858565b6002600c819055506000806000848060200190518101906125e89190613558565b925092509250600080600061264c600b546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b30600090815260016020526040812054939650919450925061266e8585613148565b50905060008161268e6dffffffffffffffffffffffffffff881685613b44565b6126989190613b30565b90506000826126b76dffffffffffffffffffffffffffff881686613b44565b6126c19190613b30565b90506126cd3085613291565b60065473ffffffffffffffffffffffffffffffffffffffff8b8116911614156127535761271f8283896dffffffffffffffffffffffffffff160383896dffffffffffffffffffffffffffff1603611e56565b6006549101906127479073ffffffffffffffffffffffffffffffffffffffff16828b8b612cae565b809a5060009150612835565b60055473ffffffffffffffffffffffffffffffffffffffff8b81169116146127d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610858565b6128068182886dffffffffffffffffffffffffffff1603848a6dffffffffffffffffffffffffffff1603611e56565b60055492019161282e9073ffffffffffffffffffffffffffffffffffffffff16838b8b612cae565b5098508860005b600080612840611647565b9150915061285182828b8b8b612e54565b60045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6128798385613b44565b6040518263ffffffff1660e01b815260040161289791815260200190565b60206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e791906138cc565b600a55604080518581526020810185905290810187905273ffffffffffffffffffffffffffffffffffffffff8c169033907fa476cebfbe7485684f5578d84d8a64a8afe93a0a2a3047bd6f3e681e108b8f119060600160405180910390a350506001600c5550989a9950505050505050505050565b428410156129c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610858565b60006129d0611371565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92909190612a2b83613bc4565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001612acc9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612b55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612bd057508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e415455524500000000000000006044820152606401610858565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b8015612d97576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152838116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a4016040805180830381600087803b158015612d5857600080fd5b505af1158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9091906138e5565b5050612e4e565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015612e3557600080fd5b505af1158015612e49573d6000803e3d6000fd5b505050505b50505050565b6dffffffffffffffffffffffffffff8511801590612e8057506dffffffffffffffffffffffffffff8411155b612ee6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610858565b63ffffffff8116612f4857600b80546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055613108565b6000612f5964010000000042613bfd565b90508163ffffffff168163ffffffff1614158015612f8657506dffffffffffffffffffffffffffff841615155b8015612fa157506dffffffffffffffffffffffffffff831615155b156130665781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612fec57612fec613c40565b600880549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff0000000000000000000000000000168161304757613047613c40565b0490508263ffffffff1681026009600082825401925050819055505050505b600b805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b60008054600a5490919080156132895760045473ffffffffffffffffffffffffffffffffffffffff1663677342ce6131936dffffffffffffffffffffffffffff808816908916613b44565b6040518263ffffffff1660e01b81526004016131b191815260200190565b60206040518083038186803b1580156131c957600080fd5b505afa1580156131dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320191906138cc565b9150808211156132895760006127108360075484866132209190613b81565b61322a9088613b44565b6132349190613b44565b61323e9190613b30565b6132489190613b30565b905080156132875761327a7f000000000000000000000000000000000000000000000000000000000000000082613492565b6132848185613b18565b93505b505b509250929050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906132c6908490613b81565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006133518584613b81565b61335b9190613b44565b6127106133688686613b44565b6133729190613b44565b61337c9190613b30565b613387906001613b18565b949350505050565b60008083158061339d575082155b156133ad57506000905080613489565b6000846133ba8589613b44565b6133c49190613b30565b905085811161341f576133da6127106002613b44565b6133e48288613b81565b61340e907f0000000000000000000000000000000000000000000000000000000000000000613b44565b6134189190613b30565b9150613487565b60008461342c8789613b44565b6134369190613b30565b90506134456127106002613b44565b61344f828a613b81565b613479907f0000000000000000000000000000000000000000000000000000000000000000613b44565b6134839190613b30565b9350505b505b94509492505050565b806000808282546134a39190613b18565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101613318565b8051801515811461351257600080fd5b919050565b60006020828403121561352957600080fd5b813561353481613ccd565b9392505050565b60006020828403121561354d57600080fd5b815161353481613ccd565b60008060006060848603121561356d57600080fd5b835161357881613ccd565b602085015190935061358981613ccd565b915061359760408501613502565b90509250925092565b600080600080600060a086880312156135b857600080fd5b85516135c381613ccd565b60208701519095506135d481613ccd565b93506135e260408701613502565b925060608601519150608086015167ffffffffffffffff81111561360557600080fd5b8601601f8101881361361657600080fd5b805161362961362482613aa0565b613a51565b81815289602083850101111561363e57600080fd5b61364f826020830160208601613b98565b8093505050509295509295909350565b6000806040838503121561367257600080fd5b825161367d81613ccd565b915061368b60208401613502565b90509250929050565b600080604083850312156136a757600080fd5b82356136b281613ccd565b946020939093013593505050565b600080604083850312156136d357600080fd5b82516136de81613ccd565b6020939093015192949293505050565b6000806040838503121561370157600080fd5b823561370c81613ccd565b9150602083013561371c81613ccd565b809150509250929050565b60008060006060848603121561373c57600080fd5b833561374781613ccd565b9250602084013561375781613ccd565b929592945050506040919091013590565b600080600080600080600060e0888a03121561378357600080fd5b873561378e81613ccd565b9650602088013561379e81613ccd565b95506040880135945060608801359350608088013560ff811681146137c257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080602083850312156137f257600080fd5b823567ffffffffffffffff8082111561380a57600080fd5b818501915085601f83011261381e57600080fd5b81358181111561382d57600080fd5b86602082850101111561383f57600080fd5b60209290920196919550909350505050565b60006020828403121561386357600080fd5b813567ffffffffffffffff81111561387a57600080fd5b8201601f8101841361388b57600080fd5b803561389961362482613aa0565b8181528560208385010111156138ae57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000602082840312156138de57600080fd5b5051919050565b600080604083850312156138f857600080fd5b505080516020909101519092909150565b60008060006060848603121561391e57600080fd5b505081359360208301359350604090920135919050565b6000815180845261394d816020860160208601613b98565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b818110156139cd57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161399b565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613a31578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016139f6565b5091979650505050505050565b6020815260006135346020830184613935565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613a9857613a98613c9e565b604052919050565b600067ffffffffffffffff821115613aba57613aba613c9e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006dffffffffffffffffffffffffffff808316818516808303821115613b0f57613b0f613c11565b01949350505050565b60008219821115613b2b57613b2b613c11565b500190565b600082613b3f57613b3f613c40565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b7c57613b7c613c11565b500290565b600082821015613b9357613b93613c11565b500390565b60005b83811015613bb3578181015183820152602001613b9b565b83811115612e4e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bf657613bf6613c11565b5060010190565b600082613c0c57613c0c613c40565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613cef57600080fd5b5056fea2646970667358221220b421233d6e1cc93b4893f66c14ebd8d00bc362f04ffa5e19f6544be79db7323c64736f6c63430008070033a26469706673582212206433ee73c9123c0ae7ae17200bb5cc23398f8a17ac0f742260c065ae7bf999bc64736f6c63430008070033",
  "devdoc": {
    "author": "Mudit Gupta.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident exchange Constant Product Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10431,
        "contract": "contracts/pool/ConstantProductPoolFactory.sol:ConstantProductPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 10435,
        "contract": "contracts/pool/ConstantProductPoolFactory.sol:ConstantProductPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}